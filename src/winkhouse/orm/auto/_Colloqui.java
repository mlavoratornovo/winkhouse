package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Allegaticolloquio;
import winkhouse.orm.Colloqui;
import winkhouse.orm.Colloquianagrafiche;
import winkhouse.orm.Colloquicriteriricerca;
import winkhouse.orm.Immobili;
import winkhouse.orm.Winkgcalendar;

/**
 * Class _Colloqui was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Colloqui extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODCOLLOQUIO_PK_COLUMN = "CODCOLLOQUIO";

    public static final Property<Integer> CODTIPOLOGIACOLLOQUIO = Property.create("codtipologiacolloquio", Integer.class);
    public static final Property<String> COMMENTOAGENZIA = Property.create("commentoagenzia", String.class);
    public static final Property<String> COMMENTOCLIENTE = Property.create("commentocliente", String.class);
    public static final Property<LocalDateTime> DATACOLLOQUIO = Property.create("datacolloquio", LocalDateTime.class);
    public static final Property<LocalDateTime> DATAINSERIMENTO = Property.create("datainserimento", LocalDateTime.class);
    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> DESCRIZIONE = Property.create("descrizione", String.class);
    public static final Property<String> ICALUID = Property.create("icaluid", String.class);
    public static final Property<String> LUOGO = Property.create("luogo", String.class);
    public static final Property<Boolean> SCADENZIERE = Property.create("scadenziere", Boolean.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Agenti> AGENTI1 = Property.create("agenti1", Agenti.class);
    public static final Property<List<Allegaticolloquio>> ALLEGATICOLLOQUIOS = Property.create("allegaticolloquios", List.class);
    public static final Property<Colloqui> COLLOQUI = Property.create("colloqui", Colloqui.class);
    public static final Property<List<Colloquianagrafiche>> COLLOQUIANAGRAFICHES = Property.create("colloquianagrafiches", List.class);
    public static final Property<List<Colloquicriteriricerca>> COLLOQUICRITERIRICERCAS = Property.create("colloquicriteriricercas", List.class);
    public static final Property<List<Colloqui>> COLLOQUIS = Property.create("colloquis", List.class);
    public static final Property<Immobili> IMMOBILI = Property.create("immobili", Immobili.class);
    public static final Property<List<Winkgcalendar>> WINKGCALENDARS = Property.create("winkgcalendars", List.class);

    protected Integer codtipologiacolloquio;
    protected String commentoagenzia;
    protected String commentocliente;
    protected LocalDateTime datacolloquio;
    protected LocalDateTime datainserimento;
    protected LocalDateTime dateupdate;
    protected String descrizione;
    protected String icaluid;
    protected String luogo;
    protected Boolean scadenziere;

    protected Object agenti;
    protected Object agenti1;
    protected Object allegaticolloquios;
    protected Object colloqui;
    protected Object colloquianagrafiches;
    protected Object colloquicriteriricercas;
    protected Object colloquis;
    protected Object immobili;
    protected Object winkgcalendars;

    public void setCodtipologiacolloquio(int codtipologiacolloquio) {
        beforePropertyWrite("codtipologiacolloquio", this.codtipologiacolloquio, codtipologiacolloquio);
        this.codtipologiacolloquio = codtipologiacolloquio;
    }

    public int getCodtipologiacolloquio() {
        beforePropertyRead("codtipologiacolloquio");
        if(this.codtipologiacolloquio == null) {
            return 0;
        }
        return this.codtipologiacolloquio;
    }

    public void setCommentoagenzia(String commentoagenzia) {
        beforePropertyWrite("commentoagenzia", this.commentoagenzia, commentoagenzia);
        this.commentoagenzia = commentoagenzia;
    }

    public String getCommentoagenzia() {
        beforePropertyRead("commentoagenzia");
        return this.commentoagenzia;
    }

    public void setCommentocliente(String commentocliente) {
        beforePropertyWrite("commentocliente", this.commentocliente, commentocliente);
        this.commentocliente = commentocliente;
    }

    public String getCommentocliente() {
        beforePropertyRead("commentocliente");
        return this.commentocliente;
    }

    public void setDatacolloquio(LocalDateTime datacolloquio) {
        beforePropertyWrite("datacolloquio", this.datacolloquio, datacolloquio);
        this.datacolloquio = datacolloquio;
    }

    public LocalDateTime getDatacolloquio() {
        beforePropertyRead("datacolloquio");
        return this.datacolloquio;
    }

    public void setDatainserimento(LocalDateTime datainserimento) {
        beforePropertyWrite("datainserimento", this.datainserimento, datainserimento);
        this.datainserimento = datainserimento;
    }

    public LocalDateTime getDatainserimento() {
        beforePropertyRead("datainserimento");
        return this.datainserimento;
    }

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setDescrizione(String descrizione) {
        beforePropertyWrite("descrizione", this.descrizione, descrizione);
        this.descrizione = descrizione;
    }

    public String getDescrizione() {
        beforePropertyRead("descrizione");
        return this.descrizione;
    }

    public void setIcaluid(String icaluid) {
        beforePropertyWrite("icaluid", this.icaluid, icaluid);
        this.icaluid = icaluid;
    }

    public String getIcaluid() {
        beforePropertyRead("icaluid");
        return this.icaluid;
    }

    public void setLuogo(String luogo) {
        beforePropertyWrite("luogo", this.luogo, luogo);
        this.luogo = luogo;
    }

    public String getLuogo() {
        beforePropertyRead("luogo");
        return this.luogo;
    }

    public void setScadenziere(boolean scadenziere) {
        beforePropertyWrite("scadenziere", this.scadenziere, scadenziere);
        this.scadenziere = scadenziere;
    }

	public boolean isScadenziere() {
        beforePropertyRead("scadenziere");
        if(this.scadenziere == null) {
            return false;
        }
        return this.scadenziere;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setAgenti1(Agenti agenti1) {
        setToOneTarget("agenti1", agenti1, true);
    }

    public Agenti getAgenti1() {
        return (Agenti)readProperty("agenti1");
    }

    public void addToAllegaticolloquios(Allegaticolloquio obj) {
        addToManyTarget("allegaticolloquios", obj, true);
    }

    public void removeFromAllegaticolloquios(Allegaticolloquio obj) {
        removeToManyTarget("allegaticolloquios", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Allegaticolloquio> getAllegaticolloquios() {
        return (List<Allegaticolloquio>)readProperty("allegaticolloquios");
    }

    public void setColloqui(Colloqui colloqui) {
        setToOneTarget("colloqui", colloqui, true);
    }

    public Colloqui getColloqui() {
        return (Colloqui)readProperty("colloqui");
    }

    public void addToColloquianagrafiches(Colloquianagrafiche obj) {
        addToManyTarget("colloquianagrafiches", obj, true);
    }

    public void removeFromColloquianagrafiches(Colloquianagrafiche obj) {
        removeToManyTarget("colloquianagrafiches", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Colloquianagrafiche> getColloquianagrafiches() {
        return (List<Colloquianagrafiche>)readProperty("colloquianagrafiches");
    }

    public void addToColloquicriteriricercas(Colloquicriteriricerca obj) {
        addToManyTarget("colloquicriteriricercas", obj, true);
    }

    public void removeFromColloquicriteriricercas(Colloquicriteriricerca obj) {
        removeToManyTarget("colloquicriteriricercas", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Colloquicriteriricerca> getColloquicriteriricercas() {
        return (List<Colloquicriteriricerca>)readProperty("colloquicriteriricercas");
    }

    public void addToColloquis(Colloqui obj) {
        addToManyTarget("colloquis", obj, true);
    }

    public void removeFromColloquis(Colloqui obj) {
        removeToManyTarget("colloquis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Colloqui> getColloquis() {
        return (List<Colloqui>)readProperty("colloquis");
    }

    public void setImmobili(Immobili immobili) {
        setToOneTarget("immobili", immobili, true);
    }

    public Immobili getImmobili() {
        return (Immobili)readProperty("immobili");
    }

    public void addToWinkgcalendars(Winkgcalendar obj) {
        addToManyTarget("winkgcalendars", obj, true);
    }

    public void removeFromWinkgcalendars(Winkgcalendar obj) {
        removeToManyTarget("winkgcalendars", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Winkgcalendar> getWinkgcalendars() {
        return (List<Winkgcalendar>)readProperty("winkgcalendars");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "codtipologiacolloquio":
                return this.codtipologiacolloquio;
            case "commentoagenzia":
                return this.commentoagenzia;
            case "commentocliente":
                return this.commentocliente;
            case "datacolloquio":
                return this.datacolloquio;
            case "datainserimento":
                return this.datainserimento;
            case "dateupdate":
                return this.dateupdate;
            case "descrizione":
                return this.descrizione;
            case "icaluid":
                return this.icaluid;
            case "luogo":
                return this.luogo;
            case "scadenziere":
                return this.scadenziere;
            case "agenti":
                return this.agenti;
            case "agenti1":
                return this.agenti1;
            case "allegaticolloquios":
                return this.allegaticolloquios;
            case "colloqui":
                return this.colloqui;
            case "colloquianagrafiches":
                return this.colloquianagrafiches;
            case "colloquicriteriricercas":
                return this.colloquicriteriricercas;
            case "colloquis":
                return this.colloquis;
            case "immobili":
                return this.immobili;
            case "winkgcalendars":
                return this.winkgcalendars;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "codtipologiacolloquio":
                this.codtipologiacolloquio = (Integer)val;
                break;
            case "commentoagenzia":
                this.commentoagenzia = (String)val;
                break;
            case "commentocliente":
                this.commentocliente = (String)val;
                break;
            case "datacolloquio":
                this.datacolloquio = (LocalDateTime)val;
                break;
            case "datainserimento":
                this.datainserimento = (LocalDateTime)val;
                break;
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "descrizione":
                this.descrizione = (String)val;
                break;
            case "icaluid":
                this.icaluid = (String)val;
                break;
            case "luogo":
                this.luogo = (String)val;
                break;
            case "scadenziere":
                this.scadenziere = (Boolean)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "agenti1":
                this.agenti1 = val;
                break;
            case "allegaticolloquios":
                this.allegaticolloquios = val;
                break;
            case "colloqui":
                this.colloqui = val;
                break;
            case "colloquianagrafiches":
                this.colloquianagrafiches = val;
                break;
            case "colloquicriteriricercas":
                this.colloquicriteriricercas = val;
                break;
            case "colloquis":
                this.colloquis = val;
                break;
            case "immobili":
                this.immobili = val;
                break;
            case "winkgcalendars":
                this.winkgcalendars = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.codtipologiacolloquio);
        out.writeObject(this.commentoagenzia);
        out.writeObject(this.commentocliente);
        out.writeObject(this.datacolloquio);
        out.writeObject(this.datainserimento);
        out.writeObject(this.dateupdate);
        out.writeObject(this.descrizione);
        out.writeObject(this.icaluid);
        out.writeObject(this.luogo);
        out.writeObject(this.scadenziere);
        out.writeObject(this.agenti);
        out.writeObject(this.agenti1);
        out.writeObject(this.allegaticolloquios);
        out.writeObject(this.colloqui);
        out.writeObject(this.colloquianagrafiches);
        out.writeObject(this.colloquicriteriricercas);
        out.writeObject(this.colloquis);
        out.writeObject(this.immobili);
        out.writeObject(this.winkgcalendars);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.codtipologiacolloquio = (Integer)in.readObject();
        this.commentoagenzia = (String)in.readObject();
        this.commentocliente = (String)in.readObject();
        this.datacolloquio = (LocalDateTime)in.readObject();
        this.datainserimento = (LocalDateTime)in.readObject();
        this.dateupdate = (LocalDateTime)in.readObject();
        this.descrizione = (String)in.readObject();
        this.icaluid = (String)in.readObject();
        this.luogo = (String)in.readObject();
        this.scadenziere = (Boolean)in.readObject();
        this.agenti = in.readObject();
        this.agenti1 = in.readObject();
        this.allegaticolloquios = in.readObject();
        this.colloqui = in.readObject();
        this.colloquianagrafiches = in.readObject();
        this.colloquicriteriricercas = in.readObject();
        this.colloquis = in.readObject();
        this.immobili = in.readObject();
        this.winkgcalendars = in.readObject();
    }

}
