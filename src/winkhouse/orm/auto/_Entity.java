package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Attribute;

/**
 * Class _Entity was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Entity extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String IDCLASSENTITY_PK_COLUMN = "IDCLASSENTITY";

    public static final Property<String> CLASSNAME = Property.create("classname", String.class);
    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> DESCRIPTION = Property.create("description", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<List<Attribute>> ATTRIBUTES = Property.create("attributes", List.class);
    public static final Property<List<Attribute>> ATTRIBUTES1 = Property.create("attributes1", List.class);

    protected String classname;
    protected LocalDateTime dateupdate;
    protected String description;

    protected Object agenti;
    protected Object attributes;
    protected Object attributes1;

    public void setClassname(String classname) {
        beforePropertyWrite("classname", this.classname, classname);
        this.classname = classname;
    }

    public String getClassname() {
        beforePropertyRead("classname");
        return this.classname;
    }

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setDescription(String description) {
        beforePropertyWrite("description", this.description, description);
        this.description = description;
    }

    public String getDescription() {
        beforePropertyRead("description");
        return this.description;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void addToAttributes(Attribute obj) {
        addToManyTarget("attributes", obj, true);
    }

    public void removeFromAttributes(Attribute obj) {
        removeToManyTarget("attributes", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Attribute> getAttributes() {
        return (List<Attribute>)readProperty("attributes");
    }

    public void addToAttributes1(Attribute obj) {
        addToManyTarget("attributes1", obj, true);
    }

    public void removeFromAttributes1(Attribute obj) {
        removeToManyTarget("attributes1", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Attribute> getAttributes1() {
        return (List<Attribute>)readProperty("attributes1");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "classname":
                return this.classname;
            case "dateupdate":
                return this.dateupdate;
            case "description":
                return this.description;
            case "agenti":
                return this.agenti;
            case "attributes":
                return this.attributes;
            case "attributes1":
                return this.attributes1;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "classname":
                this.classname = (String)val;
                break;
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "description":
                this.description = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "attributes":
                this.attributes = val;
                break;
            case "attributes1":
                this.attributes1 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.classname);
        out.writeObject(this.dateupdate);
        out.writeObject(this.description);
        out.writeObject(this.agenti);
        out.writeObject(this.attributes);
        out.writeObject(this.attributes1);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.classname = (String)in.readObject();
        this.dateupdate = (LocalDateTime)in.readObject();
        this.description = (String)in.readObject();
        this.agenti = in.readObject();
        this.attributes = in.readObject();
        this.attributes1 = in.readObject();
    }

}
