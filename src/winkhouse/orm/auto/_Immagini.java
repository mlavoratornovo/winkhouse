package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Immobili;

/**
 * Class _Immagini was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Immagini extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODIMMAGINE_PK_COLUMN = "CODIMMAGINE";

    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> IMGPROPS = Property.create("imgprops", String.class);
    public static final Property<Integer> ORDINE = Property.create("ordine", Integer.class);
    public static final Property<String> PATHIMMAGINE = Property.create("pathimmagine", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Immobili> IMMOBILI = Property.create("immobili", Immobili.class);

    protected LocalDateTime dateupdate;
    protected String imgprops;
    protected Integer ordine;
    protected String pathimmagine;

    protected Object agenti;
    protected Object immobili;

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setImgprops(String imgprops) {
        beforePropertyWrite("imgprops", this.imgprops, imgprops);
        this.imgprops = imgprops;
    }

    public String getImgprops() {
        beforePropertyRead("imgprops");
        return this.imgprops;
    }

    public void setOrdine(int ordine) {
        beforePropertyWrite("ordine", this.ordine, ordine);
        this.ordine = ordine;
    }

    public int getOrdine() {
        beforePropertyRead("ordine");
        if(this.ordine == null) {
            return 0;
        }
        return this.ordine;
    }

    public void setPathimmagine(String pathimmagine) {
        beforePropertyWrite("pathimmagine", this.pathimmagine, pathimmagine);
        this.pathimmagine = pathimmagine;
    }

    public String getPathimmagine() {
        beforePropertyRead("pathimmagine");
        return this.pathimmagine;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setImmobili(Immobili immobili) {
        setToOneTarget("immobili", immobili, true);
    }

    public Immobili getImmobili() {
        return (Immobili)readProperty("immobili");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateupdate":
                return this.dateupdate;
            case "imgprops":
                return this.imgprops;
            case "ordine":
                return this.ordine;
            case "pathimmagine":
                return this.pathimmagine;
            case "agenti":
                return this.agenti;
            case "immobili":
                return this.immobili;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "imgprops":
                this.imgprops = (String)val;
                break;
            case "ordine":
                this.ordine = (Integer)val;
                break;
            case "pathimmagine":
                this.pathimmagine = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "immobili":
                this.immobili = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateupdate);
        out.writeObject(this.imgprops);
        out.writeObject(this.ordine);
        out.writeObject(this.pathimmagine);
        out.writeObject(this.agenti);
        out.writeObject(this.immobili);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateupdate = (LocalDateTime)in.readObject();
        this.imgprops = (String)in.readObject();
        this.ordine = (Integer)in.readObject();
        this.pathimmagine = (String)in.readObject();
        this.agenti = in.readObject();
        this.immobili = in.readObject();
    }

}
