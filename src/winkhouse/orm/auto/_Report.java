package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Reportmarkers;

/**
 * Class _Report was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Report extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODREPORT_PK_COLUMN = "CODREPORT";

    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> DESCRIZIONE = Property.create("descrizione", String.class);
    public static final Property<Boolean> ISLIST = Property.create("islist", Boolean.class);
    public static final Property<String> NOME = Property.create("nome", String.class);
    public static final Property<String> TEMPLATE = Property.create("template", String.class);
    public static final Property<String> TIPO = Property.create("tipo", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<List<Reportmarkers>> REPORTMARKERSS = Property.create("reportmarkerss", List.class);

    protected LocalDateTime dateupdate;
    protected String descrizione;
    protected Boolean islist;
    protected String nome;
    protected String template;
    protected String tipo;

    protected Object agenti;
    protected Object reportmarkerss;

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setDescrizione(String descrizione) {
        beforePropertyWrite("descrizione", this.descrizione, descrizione);
        this.descrizione = descrizione;
    }

    public String getDescrizione() {
        beforePropertyRead("descrizione");
        return this.descrizione;
    }

    public void setIslist(boolean islist) {
        beforePropertyWrite("islist", this.islist, islist);
        this.islist = islist;
    }

	public boolean isIslist() {
        beforePropertyRead("islist");
        if(this.islist == null) {
            return false;
        }
        return this.islist;
    }

    public void setNome(String nome) {
        beforePropertyWrite("nome", this.nome, nome);
        this.nome = nome;
    }

    public String getNome() {
        beforePropertyRead("nome");
        return this.nome;
    }

    public void setTemplate(String template) {
        beforePropertyWrite("template", this.template, template);
        this.template = template;
    }

    public String getTemplate() {
        beforePropertyRead("template");
        return this.template;
    }

    public void setTipo(String tipo) {
        beforePropertyWrite("tipo", this.tipo, tipo);
        this.tipo = tipo;
    }

    public String getTipo() {
        beforePropertyRead("tipo");
        return this.tipo;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void addToReportmarkerss(Reportmarkers obj) {
        addToManyTarget("reportmarkerss", obj, true);
    }

    public void removeFromReportmarkerss(Reportmarkers obj) {
        removeToManyTarget("reportmarkerss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Reportmarkers> getReportmarkerss() {
        return (List<Reportmarkers>)readProperty("reportmarkerss");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateupdate":
                return this.dateupdate;
            case "descrizione":
                return this.descrizione;
            case "islist":
                return this.islist;
            case "nome":
                return this.nome;
            case "template":
                return this.template;
            case "tipo":
                return this.tipo;
            case "agenti":
                return this.agenti;
            case "reportmarkerss":
                return this.reportmarkerss;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "descrizione":
                this.descrizione = (String)val;
                break;
            case "islist":
                this.islist = (Boolean)val;
                break;
            case "nome":
                this.nome = (String)val;
                break;
            case "template":
                this.template = (String)val;
                break;
            case "tipo":
                this.tipo = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "reportmarkerss":
                this.reportmarkerss = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateupdate);
        out.writeObject(this.descrizione);
        out.writeObject(this.islist);
        out.writeObject(this.nome);
        out.writeObject(this.template);
        out.writeObject(this.tipo);
        out.writeObject(this.agenti);
        out.writeObject(this.reportmarkerss);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateupdate = (LocalDateTime)in.readObject();
        this.descrizione = (String)in.readObject();
        this.islist = (Boolean)in.readObject();
        this.nome = (String)in.readObject();
        this.template = (String)in.readObject();
        this.tipo = (String)in.readObject();
        this.agenti = in.readObject();
        this.reportmarkerss = in.readObject();
    }

}
