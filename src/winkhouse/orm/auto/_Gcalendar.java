package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Gdata;

/**
 * Class _Gcalendar was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Gcalendar extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODGCALENDAR_PK_COLUMN = "CODGCALENDAR";

    public static final Property<String> ALLURL = Property.create("allurl", String.class);
    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> PRIVATEURL = Property.create("privateurl", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Gdata> GDATA = Property.create("gdata", Gdata.class);

    protected String allurl;
    protected LocalDateTime dateupdate;
    protected String privateurl;

    protected Object agenti;
    protected Object gdata;

    public void setAllurl(String allurl) {
        beforePropertyWrite("allurl", this.allurl, allurl);
        this.allurl = allurl;
    }

    public String getAllurl() {
        beforePropertyRead("allurl");
        return this.allurl;
    }

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setPrivateurl(String privateurl) {
        beforePropertyWrite("privateurl", this.privateurl, privateurl);
        this.privateurl = privateurl;
    }

    public String getPrivateurl() {
        beforePropertyRead("privateurl");
        return this.privateurl;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setGdata(Gdata gdata) {
        setToOneTarget("gdata", gdata, true);
    }

    public Gdata getGdata() {
        return (Gdata)readProperty("gdata");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "allurl":
                return this.allurl;
            case "dateupdate":
                return this.dateupdate;
            case "privateurl":
                return this.privateurl;
            case "agenti":
                return this.agenti;
            case "gdata":
                return this.gdata;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "allurl":
                this.allurl = (String)val;
                break;
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "privateurl":
                this.privateurl = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "gdata":
                this.gdata = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.allurl);
        out.writeObject(this.dateupdate);
        out.writeObject(this.privateurl);
        out.writeObject(this.agenti);
        out.writeObject(this.gdata);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.allurl = (String)in.readObject();
        this.dateupdate = (LocalDateTime)in.readObject();
        this.privateurl = (String)in.readObject();
        this.agenti = in.readObject();
        this.gdata = in.readObject();
    }

}
