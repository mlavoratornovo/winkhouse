package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Attributevalue;
import winkhouse.orm.Entity;

/**
 * Class _Attribute was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Attribute extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String IDATTRIBUTE_PK_COLUMN = "IDATTRIBUTE";

    public static final Property<String> ATTRIBUTENAME = Property.create("attributename", String.class);
    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> ENUMFIELDVALUES = Property.create("enumfieldvalues", String.class);
    public static final Property<String> FIELDTYPE = Property.create("fieldtype", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<List<Attributevalue>> ATTRIBUTEVALUES = Property.create("attributevalues", List.class);
    public static final Property<Entity> ENTITY = Property.create("entity", Entity.class);
    public static final Property<Entity> ENTITY1 = Property.create("entity1", Entity.class);

    protected String attributename;
    protected LocalDateTime dateupdate;
    protected String enumfieldvalues;
    protected String fieldtype;

    protected Object agenti;
    protected Object attributevalues;
    protected Object entity;
    protected Object entity1;

    public void setAttributename(String attributename) {
        beforePropertyWrite("attributename", this.attributename, attributename);
        this.attributename = attributename;
    }

    public String getAttributename() {
        beforePropertyRead("attributename");
        return this.attributename;
    }

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setEnumfieldvalues(String enumfieldvalues) {
        beforePropertyWrite("enumfieldvalues", this.enumfieldvalues, enumfieldvalues);
        this.enumfieldvalues = enumfieldvalues;
    }

    public String getEnumfieldvalues() {
        beforePropertyRead("enumfieldvalues");
        return this.enumfieldvalues;
    }

    public void setFieldtype(String fieldtype) {
        beforePropertyWrite("fieldtype", this.fieldtype, fieldtype);
        this.fieldtype = fieldtype;
    }

    public String getFieldtype() {
        beforePropertyRead("fieldtype");
        return this.fieldtype;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void addToAttributevalues(Attributevalue obj) {
        addToManyTarget("attributevalues", obj, true);
    }

    public void removeFromAttributevalues(Attributevalue obj) {
        removeToManyTarget("attributevalues", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Attributevalue> getAttributevalues() {
        return (List<Attributevalue>)readProperty("attributevalues");
    }

    public void setEntity(Entity entity) {
        setToOneTarget("entity", entity, true);
    }

    public Entity getEntity() {
        return (Entity)readProperty("entity");
    }

    public void setEntity1(Entity entity1) {
        setToOneTarget("entity1", entity1, true);
    }

    public Entity getEntity1() {
        return (Entity)readProperty("entity1");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "attributename":
                return this.attributename;
            case "dateupdate":
                return this.dateupdate;
            case "enumfieldvalues":
                return this.enumfieldvalues;
            case "fieldtype":
                return this.fieldtype;
            case "agenti":
                return this.agenti;
            case "attributevalues":
                return this.attributevalues;
            case "entity":
                return this.entity;
            case "entity1":
                return this.entity1;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "attributename":
                this.attributename = (String)val;
                break;
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "enumfieldvalues":
                this.enumfieldvalues = (String)val;
                break;
            case "fieldtype":
                this.fieldtype = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "attributevalues":
                this.attributevalues = val;
                break;
            case "entity":
                this.entity = val;
                break;
            case "entity1":
                this.entity1 = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.attributename);
        out.writeObject(this.dateupdate);
        out.writeObject(this.enumfieldvalues);
        out.writeObject(this.fieldtype);
        out.writeObject(this.agenti);
        out.writeObject(this.attributevalues);
        out.writeObject(this.entity);
        out.writeObject(this.entity1);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.attributename = (String)in.readObject();
        this.dateupdate = (LocalDateTime)in.readObject();
        this.enumfieldvalues = (String)in.readObject();
        this.fieldtype = (String)in.readObject();
        this.agenti = in.readObject();
        this.attributevalues = in.readObject();
        this.entity = in.readObject();
        this.entity1 = in.readObject();
    }

}
