package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Abbinamenti;
import winkhouse.orm.Affittianagrafiche;
import winkhouse.orm.Affittirate;
import winkhouse.orm.Affittispese;
import winkhouse.orm.Agenti;
import winkhouse.orm.Anagraficheappuntamenti;
import winkhouse.orm.Classicliente;
import winkhouse.orm.Colloquianagrafiche;
import winkhouse.orm.Contatti;
import winkhouse.orm.Immobili;
import winkhouse.orm.Immobilipropietari;

/**
 * Class _Anagrafiche was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Anagrafiche extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODANAGRAFICA_PK_COLUMN = "CODANAGRAFICA";

    public static final Property<String> CAP = Property.create("cap", String.class);
    public static final Property<String> CITTA = Property.create("citta", String.class);
    public static final Property<String> CODICEFISCALE = Property.create("codicefiscale", String.class);
    public static final Property<String> COGNOME = Property.create("cognome", String.class);
    public static final Property<String> COMMENTO = Property.create("commento", String.class);
    public static final Property<LocalDate> DATAINSERIMENTO = Property.create("datainserimento", LocalDate.class);
    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> INDIRIZZO = Property.create("indirizzo", String.class);
    public static final Property<String> NCIVICO = Property.create("ncivico", String.class);
    public static final Property<String> NOME = Property.create("nome", String.class);
    public static final Property<String> PIVA = Property.create("piva", String.class);
    public static final Property<String> PROVINCIA = Property.create("provincia", String.class);
    public static final Property<String> RAGSOC = Property.create("ragsoc", String.class);
    public static final Property<Boolean> STORICO = Property.create("storico", Boolean.class);
    public static final Property<List<Abbinamenti>> ABBINAMENTIS = Property.create("abbinamentis", List.class);
    public static final Property<List<Affittianagrafiche>> AFFITTIANAGRAFICHES = Property.create("affittianagrafiches", List.class);
    public static final Property<List<Affittirate>> AFFITTIRATES = Property.create("affittirates", List.class);
    public static final Property<List<Affittispese>> AFFITTISPESES = Property.create("affittispeses", List.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Agenti> AGENTI1 = Property.create("agenti1", Agenti.class);
    public static final Property<List<Anagraficheappuntamenti>> ANAGRAFICHEAPPUNTAMENTIS = Property.create("anagraficheappuntamentis", List.class);
    public static final Property<Classicliente> CLASSICLIENTE = Property.create("classicliente", Classicliente.class);
    public static final Property<List<Colloquianagrafiche>> COLLOQUIANAGRAFICHES = Property.create("colloquianagrafiches", List.class);
    public static final Property<List<Contatti>> CONTATTIS = Property.create("contattis", List.class);
    public static final Property<List<Immobilipropietari>> IMMOBILIPROPIETARIS = Property.create("immobilipropietaris", List.class);
    public static final Property<List<Immobili>> IMMOBILIS = Property.create("immobilis", List.class);

    protected String cap;
    protected String citta;
    protected String codicefiscale;
    protected String cognome;
    protected String commento;
    protected LocalDate datainserimento;
    protected LocalDateTime dateupdate;
    protected String indirizzo;
    protected String ncivico;
    protected String nome;
    protected String piva;
    protected String provincia;
    protected String ragsoc;
    protected Boolean storico;

    protected Object abbinamentis;
    protected Object affittianagrafiches;
    protected Object affittirates;
    protected Object affittispeses;
    protected Object agenti;
    protected Object agenti1;
    protected Object anagraficheappuntamentis;
    protected Object classicliente;
    protected Object colloquianagrafiches;
    protected Object contattis;
    protected Object immobilipropietaris;
    protected Object immobilis;

    public void setCap(String cap) {
        beforePropertyWrite("cap", this.cap, cap);
        this.cap = cap;
    }

    public String getCap() {
        beforePropertyRead("cap");
        return this.cap;
    }

    public void setCitta(String citta) {
        beforePropertyWrite("citta", this.citta, citta);
        this.citta = citta;
    }

    public String getCitta() {
        beforePropertyRead("citta");
        return this.citta;
    }

    public void setCodicefiscale(String codicefiscale) {
        beforePropertyWrite("codicefiscale", this.codicefiscale, codicefiscale);
        this.codicefiscale = codicefiscale;
    }

    public String getCodicefiscale() {
        beforePropertyRead("codicefiscale");
        return this.codicefiscale;
    }

    public void setCognome(String cognome) {
        beforePropertyWrite("cognome", this.cognome, cognome);
        this.cognome = cognome;
    }

    public String getCognome() {
        beforePropertyRead("cognome");
        return this.cognome;
    }

    public void setCommento(String commento) {
        beforePropertyWrite("commento", this.commento, commento);
        this.commento = commento;
    }

    public String getCommento() {
        beforePropertyRead("commento");
        return this.commento;
    }

    public void setDatainserimento(LocalDate datainserimento) {
        beforePropertyWrite("datainserimento", this.datainserimento, datainserimento);
        this.datainserimento = datainserimento;
    }

    public LocalDate getDatainserimento() {
        beforePropertyRead("datainserimento");
        return this.datainserimento;
    }

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setIndirizzo(String indirizzo) {
        beforePropertyWrite("indirizzo", this.indirizzo, indirizzo);
        this.indirizzo = indirizzo;
    }

    public String getIndirizzo() {
        beforePropertyRead("indirizzo");
        return this.indirizzo;
    }

    public void setNcivico(String ncivico) {
        beforePropertyWrite("ncivico", this.ncivico, ncivico);
        this.ncivico = ncivico;
    }

    public String getNcivico() {
        beforePropertyRead("ncivico");
        return this.ncivico;
    }

    public void setNome(String nome) {
        beforePropertyWrite("nome", this.nome, nome);
        this.nome = nome;
    }

    public String getNome() {
        beforePropertyRead("nome");
        return this.nome;
    }

    public void setPiva(String piva) {
        beforePropertyWrite("piva", this.piva, piva);
        this.piva = piva;
    }

    public String getPiva() {
        beforePropertyRead("piva");
        return this.piva;
    }

    public void setProvincia(String provincia) {
        beforePropertyWrite("provincia", this.provincia, provincia);
        this.provincia = provincia;
    }

    public String getProvincia() {
        beforePropertyRead("provincia");
        return this.provincia;
    }

    public void setRagsoc(String ragsoc) {
        beforePropertyWrite("ragsoc", this.ragsoc, ragsoc);
        this.ragsoc = ragsoc;
    }

    public String getRagsoc() {
        beforePropertyRead("ragsoc");
        return this.ragsoc;
    }

    public void setStorico(boolean storico) {
        beforePropertyWrite("storico", this.storico, storico);
        this.storico = storico;
    }

	public boolean isStorico() {
        beforePropertyRead("storico");
        if(this.storico == null) {
            return false;
        }
        return this.storico;
    }

    public void addToAbbinamentis(Abbinamenti obj) {
        addToManyTarget("abbinamentis", obj, true);
    }

    public void removeFromAbbinamentis(Abbinamenti obj) {
        removeToManyTarget("abbinamentis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Abbinamenti> getAbbinamentis() {
        return (List<Abbinamenti>)readProperty("abbinamentis");
    }

    public void addToAffittianagrafiches(Affittianagrafiche obj) {
        addToManyTarget("affittianagrafiches", obj, true);
    }

    public void removeFromAffittianagrafiches(Affittianagrafiche obj) {
        removeToManyTarget("affittianagrafiches", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Affittianagrafiche> getAffittianagrafiches() {
        return (List<Affittianagrafiche>)readProperty("affittianagrafiches");
    }

    public void addToAffittirates(Affittirate obj) {
        addToManyTarget("affittirates", obj, true);
    }

    public void removeFromAffittirates(Affittirate obj) {
        removeToManyTarget("affittirates", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Affittirate> getAffittirates() {
        return (List<Affittirate>)readProperty("affittirates");
    }

    public void addToAffittispeses(Affittispese obj) {
        addToManyTarget("affittispeses", obj, true);
    }

    public void removeFromAffittispeses(Affittispese obj) {
        removeToManyTarget("affittispeses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Affittispese> getAffittispeses() {
        return (List<Affittispese>)readProperty("affittispeses");
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setAgenti1(Agenti agenti1) {
        setToOneTarget("agenti1", agenti1, true);
    }

    public Agenti getAgenti1() {
        return (Agenti)readProperty("agenti1");
    }

    public void addToAnagraficheappuntamentis(Anagraficheappuntamenti obj) {
        addToManyTarget("anagraficheappuntamentis", obj, true);
    }

    public void removeFromAnagraficheappuntamentis(Anagraficheappuntamenti obj) {
        removeToManyTarget("anagraficheappuntamentis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Anagraficheappuntamenti> getAnagraficheappuntamentis() {
        return (List<Anagraficheappuntamenti>)readProperty("anagraficheappuntamentis");
    }

    public void setClassicliente(Classicliente classicliente) {
        setToOneTarget("classicliente", classicliente, true);
    }

    public Classicliente getClassicliente() {
        return (Classicliente)readProperty("classicliente");
    }

    public void addToColloquianagrafiches(Colloquianagrafiche obj) {
        addToManyTarget("colloquianagrafiches", obj, true);
    }

    public void removeFromColloquianagrafiches(Colloquianagrafiche obj) {
        removeToManyTarget("colloquianagrafiches", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Colloquianagrafiche> getColloquianagrafiches() {
        return (List<Colloquianagrafiche>)readProperty("colloquianagrafiches");
    }

    public void addToContattis(Contatti obj) {
        addToManyTarget("contattis", obj, true);
    }

    public void removeFromContattis(Contatti obj) {
        removeToManyTarget("contattis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Contatti> getContattis() {
        return (List<Contatti>)readProperty("contattis");
    }

    public void addToImmobilipropietaris(Immobilipropietari obj) {
        addToManyTarget("immobilipropietaris", obj, true);
    }

    public void removeFromImmobilipropietaris(Immobilipropietari obj) {
        removeToManyTarget("immobilipropietaris", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Immobilipropietari> getImmobilipropietaris() {
        return (List<Immobilipropietari>)readProperty("immobilipropietaris");
    }

    public void addToImmobilis(Immobili obj) {
        addToManyTarget("immobilis", obj, true);
    }

    public void removeFromImmobilis(Immobili obj) {
        removeToManyTarget("immobilis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Immobili> getImmobilis() {
        return (List<Immobili>)readProperty("immobilis");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cap":
                return this.cap;
            case "citta":
                return this.citta;
            case "codicefiscale":
                return this.codicefiscale;
            case "cognome":
                return this.cognome;
            case "commento":
                return this.commento;
            case "datainserimento":
                return this.datainserimento;
            case "dateupdate":
                return this.dateupdate;
            case "indirizzo":
                return this.indirizzo;
            case "ncivico":
                return this.ncivico;
            case "nome":
                return this.nome;
            case "piva":
                return this.piva;
            case "provincia":
                return this.provincia;
            case "ragsoc":
                return this.ragsoc;
            case "storico":
                return this.storico;
            case "abbinamentis":
                return this.abbinamentis;
            case "affittianagrafiches":
                return this.affittianagrafiches;
            case "affittirates":
                return this.affittirates;
            case "affittispeses":
                return this.affittispeses;
            case "agenti":
                return this.agenti;
            case "agenti1":
                return this.agenti1;
            case "anagraficheappuntamentis":
                return this.anagraficheappuntamentis;
            case "classicliente":
                return this.classicliente;
            case "colloquianagrafiches":
                return this.colloquianagrafiches;
            case "contattis":
                return this.contattis;
            case "immobilipropietaris":
                return this.immobilipropietaris;
            case "immobilis":
                return this.immobilis;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cap":
                this.cap = (String)val;
                break;
            case "citta":
                this.citta = (String)val;
                break;
            case "codicefiscale":
                this.codicefiscale = (String)val;
                break;
            case "cognome":
                this.cognome = (String)val;
                break;
            case "commento":
                this.commento = (String)val;
                break;
            case "datainserimento":
                this.datainserimento = (LocalDate)val;
                break;
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "indirizzo":
                this.indirizzo = (String)val;
                break;
            case "ncivico":
                this.ncivico = (String)val;
                break;
            case "nome":
                this.nome = (String)val;
                break;
            case "piva":
                this.piva = (String)val;
                break;
            case "provincia":
                this.provincia = (String)val;
                break;
            case "ragsoc":
                this.ragsoc = (String)val;
                break;
            case "storico":
                this.storico = (Boolean)val;
                break;
            case "abbinamentis":
                this.abbinamentis = val;
                break;
            case "affittianagrafiches":
                this.affittianagrafiches = val;
                break;
            case "affittirates":
                this.affittirates = val;
                break;
            case "affittispeses":
                this.affittispeses = val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "agenti1":
                this.agenti1 = val;
                break;
            case "anagraficheappuntamentis":
                this.anagraficheappuntamentis = val;
                break;
            case "classicliente":
                this.classicliente = val;
                break;
            case "colloquianagrafiches":
                this.colloquianagrafiches = val;
                break;
            case "contattis":
                this.contattis = val;
                break;
            case "immobilipropietaris":
                this.immobilipropietaris = val;
                break;
            case "immobilis":
                this.immobilis = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.cap);
        out.writeObject(this.citta);
        out.writeObject(this.codicefiscale);
        out.writeObject(this.cognome);
        out.writeObject(this.commento);
        out.writeObject(this.datainserimento);
        out.writeObject(this.dateupdate);
        out.writeObject(this.indirizzo);
        out.writeObject(this.ncivico);
        out.writeObject(this.nome);
        out.writeObject(this.piva);
        out.writeObject(this.provincia);
        out.writeObject(this.ragsoc);
        out.writeObject(this.storico);
        out.writeObject(this.abbinamentis);
        out.writeObject(this.affittianagrafiches);
        out.writeObject(this.affittirates);
        out.writeObject(this.affittispeses);
        out.writeObject(this.agenti);
        out.writeObject(this.agenti1);
        out.writeObject(this.anagraficheappuntamentis);
        out.writeObject(this.classicliente);
        out.writeObject(this.colloquianagrafiches);
        out.writeObject(this.contattis);
        out.writeObject(this.immobilipropietaris);
        out.writeObject(this.immobilis);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cap = (String)in.readObject();
        this.citta = (String)in.readObject();
        this.codicefiscale = (String)in.readObject();
        this.cognome = (String)in.readObject();
        this.commento = (String)in.readObject();
        this.datainserimento = (LocalDate)in.readObject();
        this.dateupdate = (LocalDateTime)in.readObject();
        this.indirizzo = (String)in.readObject();
        this.ncivico = (String)in.readObject();
        this.nome = (String)in.readObject();
        this.piva = (String)in.readObject();
        this.provincia = (String)in.readObject();
        this.ragsoc = (String)in.readObject();
        this.storico = (Boolean)in.readObject();
        this.abbinamentis = in.readObject();
        this.affittianagrafiches = in.readObject();
        this.affittirates = in.readObject();
        this.affittispeses = in.readObject();
        this.agenti = in.readObject();
        this.agenti1 = in.readObject();
        this.anagraficheappuntamentis = in.readObject();
        this.classicliente = in.readObject();
        this.colloquianagrafiches = in.readObject();
        this.contattis = in.readObject();
        this.immobilipropietaris = in.readObject();
        this.immobilis = in.readObject();
    }

}
