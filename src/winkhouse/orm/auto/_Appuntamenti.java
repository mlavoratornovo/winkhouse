package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Agentiappuntamenti;
import winkhouse.orm.Anagraficheappuntamenti;
import winkhouse.orm.Appuntamenti;
import winkhouse.orm.Tipiappuntamenti;
import winkhouse.orm.Winkgcalendar;

/**
 * Class _Appuntamenti was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Appuntamenti extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODAPPUNTAMENTO_PK_COLUMN = "CODAPPUNTAMENTO";

    public static final Property<LocalDateTime> DATAAPPUNTAMENTO = Property.create("dataappuntamento", LocalDateTime.class);
    public static final Property<LocalDateTime> DATAFINEAPPUNTAMENTO = Property.create("datafineappuntamento", LocalDateTime.class);
    public static final Property<LocalDateTime> DATAINSERIMENTO = Property.create("datainserimento", LocalDateTime.class);
    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> DESCRIZIONE = Property.create("descrizione", String.class);
    public static final Property<String> ICALUID = Property.create("icaluid", String.class);
    public static final Property<String> LUOGO = Property.create("luogo", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<List<Agentiappuntamenti>> AGENTIAPPUNTAMENTIS = Property.create("agentiappuntamentis", List.class);
    public static final Property<List<Anagraficheappuntamenti>> ANAGRAFICHEAPPUNTAMENTIS = Property.create("anagraficheappuntamentis", List.class);
    public static final Property<Appuntamenti> APPUNTAMENTI = Property.create("appuntamenti", Appuntamenti.class);
    public static final Property<List<Appuntamenti>> APPUNTAMENTIS = Property.create("appuntamentis", List.class);
    public static final Property<Tipiappuntamenti> TIPIAPPUNTAMENTI = Property.create("tipiappuntamenti", Tipiappuntamenti.class);
    public static final Property<List<Winkgcalendar>> WINKGCALENDARS = Property.create("winkgcalendars", List.class);

    protected LocalDateTime dataappuntamento;
    protected LocalDateTime datafineappuntamento;
    protected LocalDateTime datainserimento;
    protected LocalDateTime dateupdate;
    protected String descrizione;
    protected String icaluid;
    protected String luogo;

    protected Object agenti;
    protected Object agentiappuntamentis;
    protected Object anagraficheappuntamentis;
    protected Object appuntamenti;
    protected Object appuntamentis;
    protected Object tipiappuntamenti;
    protected Object winkgcalendars;

    public void setDataappuntamento(LocalDateTime dataappuntamento) {
        beforePropertyWrite("dataappuntamento", this.dataappuntamento, dataappuntamento);
        this.dataappuntamento = dataappuntamento;
    }

    public LocalDateTime getDataappuntamento() {
        beforePropertyRead("dataappuntamento");
        return this.dataappuntamento;
    }

    public void setDatafineappuntamento(LocalDateTime datafineappuntamento) {
        beforePropertyWrite("datafineappuntamento", this.datafineappuntamento, datafineappuntamento);
        this.datafineappuntamento = datafineappuntamento;
    }

    public LocalDateTime getDatafineappuntamento() {
        beforePropertyRead("datafineappuntamento");
        return this.datafineappuntamento;
    }

    public void setDatainserimento(LocalDateTime datainserimento) {
        beforePropertyWrite("datainserimento", this.datainserimento, datainserimento);
        this.datainserimento = datainserimento;
    }

    public LocalDateTime getDatainserimento() {
        beforePropertyRead("datainserimento");
        return this.datainserimento;
    }

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setDescrizione(String descrizione) {
        beforePropertyWrite("descrizione", this.descrizione, descrizione);
        this.descrizione = descrizione;
    }

    public String getDescrizione() {
        beforePropertyRead("descrizione");
        return this.descrizione;
    }

    public void setIcaluid(String icaluid) {
        beforePropertyWrite("icaluid", this.icaluid, icaluid);
        this.icaluid = icaluid;
    }

    public String getIcaluid() {
        beforePropertyRead("icaluid");
        return this.icaluid;
    }

    public void setLuogo(String luogo) {
        beforePropertyWrite("luogo", this.luogo, luogo);
        this.luogo = luogo;
    }

    public String getLuogo() {
        beforePropertyRead("luogo");
        return this.luogo;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void addToAgentiappuntamentis(Agentiappuntamenti obj) {
        addToManyTarget("agentiappuntamentis", obj, true);
    }

    public void removeFromAgentiappuntamentis(Agentiappuntamenti obj) {
        removeToManyTarget("agentiappuntamentis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Agentiappuntamenti> getAgentiappuntamentis() {
        return (List<Agentiappuntamenti>)readProperty("agentiappuntamentis");
    }

    public void addToAnagraficheappuntamentis(Anagraficheappuntamenti obj) {
        addToManyTarget("anagraficheappuntamentis", obj, true);
    }

    public void removeFromAnagraficheappuntamentis(Anagraficheappuntamenti obj) {
        removeToManyTarget("anagraficheappuntamentis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Anagraficheappuntamenti> getAnagraficheappuntamentis() {
        return (List<Anagraficheappuntamenti>)readProperty("anagraficheappuntamentis");
    }

    public void setAppuntamenti(Appuntamenti appuntamenti) {
        setToOneTarget("appuntamenti", appuntamenti, true);
    }

    public Appuntamenti getAppuntamenti() {
        return (Appuntamenti)readProperty("appuntamenti");
    }

    public void addToAppuntamentis(Appuntamenti obj) {
        addToManyTarget("appuntamentis", obj, true);
    }

    public void removeFromAppuntamentis(Appuntamenti obj) {
        removeToManyTarget("appuntamentis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Appuntamenti> getAppuntamentis() {
        return (List<Appuntamenti>)readProperty("appuntamentis");
    }

    public void setTipiappuntamenti(Tipiappuntamenti tipiappuntamenti) {
        setToOneTarget("tipiappuntamenti", tipiappuntamenti, true);
    }

    public Tipiappuntamenti getTipiappuntamenti() {
        return (Tipiappuntamenti)readProperty("tipiappuntamenti");
    }

    public void addToWinkgcalendars(Winkgcalendar obj) {
        addToManyTarget("winkgcalendars", obj, true);
    }

    public void removeFromWinkgcalendars(Winkgcalendar obj) {
        removeToManyTarget("winkgcalendars", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Winkgcalendar> getWinkgcalendars() {
        return (List<Winkgcalendar>)readProperty("winkgcalendars");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dataappuntamento":
                return this.dataappuntamento;
            case "datafineappuntamento":
                return this.datafineappuntamento;
            case "datainserimento":
                return this.datainserimento;
            case "dateupdate":
                return this.dateupdate;
            case "descrizione":
                return this.descrizione;
            case "icaluid":
                return this.icaluid;
            case "luogo":
                return this.luogo;
            case "agenti":
                return this.agenti;
            case "agentiappuntamentis":
                return this.agentiappuntamentis;
            case "anagraficheappuntamentis":
                return this.anagraficheappuntamentis;
            case "appuntamenti":
                return this.appuntamenti;
            case "appuntamentis":
                return this.appuntamentis;
            case "tipiappuntamenti":
                return this.tipiappuntamenti;
            case "winkgcalendars":
                return this.winkgcalendars;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dataappuntamento":
                this.dataappuntamento = (LocalDateTime)val;
                break;
            case "datafineappuntamento":
                this.datafineappuntamento = (LocalDateTime)val;
                break;
            case "datainserimento":
                this.datainserimento = (LocalDateTime)val;
                break;
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "descrizione":
                this.descrizione = (String)val;
                break;
            case "icaluid":
                this.icaluid = (String)val;
                break;
            case "luogo":
                this.luogo = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "agentiappuntamentis":
                this.agentiappuntamentis = val;
                break;
            case "anagraficheappuntamentis":
                this.anagraficheappuntamentis = val;
                break;
            case "appuntamenti":
                this.appuntamenti = val;
                break;
            case "appuntamentis":
                this.appuntamentis = val;
                break;
            case "tipiappuntamenti":
                this.tipiappuntamenti = val;
                break;
            case "winkgcalendars":
                this.winkgcalendars = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dataappuntamento);
        out.writeObject(this.datafineappuntamento);
        out.writeObject(this.datainserimento);
        out.writeObject(this.dateupdate);
        out.writeObject(this.descrizione);
        out.writeObject(this.icaluid);
        out.writeObject(this.luogo);
        out.writeObject(this.agenti);
        out.writeObject(this.agentiappuntamentis);
        out.writeObject(this.anagraficheappuntamentis);
        out.writeObject(this.appuntamenti);
        out.writeObject(this.appuntamentis);
        out.writeObject(this.tipiappuntamenti);
        out.writeObject(this.winkgcalendars);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dataappuntamento = (LocalDateTime)in.readObject();
        this.datafineappuntamento = (LocalDateTime)in.readObject();
        this.datainserimento = (LocalDateTime)in.readObject();
        this.dateupdate = (LocalDateTime)in.readObject();
        this.descrizione = (String)in.readObject();
        this.icaluid = (String)in.readObject();
        this.luogo = (String)in.readObject();
        this.agenti = in.readObject();
        this.agentiappuntamentis = in.readObject();
        this.anagraficheappuntamentis = in.readObject();
        this.appuntamenti = in.readObject();
        this.appuntamentis = in.readObject();
        this.tipiappuntamenti = in.readObject();
        this.winkgcalendars = in.readObject();
    }

}
