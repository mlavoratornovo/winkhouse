package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Immobili;

/**
 * Class _Daticatastali was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Daticatastali extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODDATICATASTALI_PK_COLUMN = "CODDATICATASTALI";

    public static final Property<String> CATEGORIA = Property.create("categoria", String.class);
    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<Double> DIMENSIONE = Property.create("dimensione", Double.class);
    public static final Property<String> FOGLIO = Property.create("foglio", String.class);
    public static final Property<String> PARTICELLA = Property.create("particella", String.class);
    public static final Property<Double> REDDITOAGRARIO = Property.create("redditoagrario", Double.class);
    public static final Property<Double> REDDITODOMENICALE = Property.create("redditodomenicale", Double.class);
    public static final Property<Double> RENDITA = Property.create("rendita", Double.class);
    public static final Property<String> SUBALTERNO = Property.create("subalterno", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Immobili> IMMOBILI = Property.create("immobili", Immobili.class);

    protected String categoria;
    protected LocalDateTime dateupdate;
    protected Double dimensione;
    protected String foglio;
    protected String particella;
    protected Double redditoagrario;
    protected Double redditodomenicale;
    protected Double rendita;
    protected String subalterno;

    protected Object agenti;
    protected Object immobili;

    public void setCategoria(String categoria) {
        beforePropertyWrite("categoria", this.categoria, categoria);
        this.categoria = categoria;
    }

    public String getCategoria() {
        beforePropertyRead("categoria");
        return this.categoria;
    }

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setDimensione(double dimensione) {
        beforePropertyWrite("dimensione", this.dimensione, dimensione);
        this.dimensione = dimensione;
    }

    public double getDimensione() {
        beforePropertyRead("dimensione");
        if(this.dimensione == null) {
            return 0;
        }
        return this.dimensione;
    }

    public void setFoglio(String foglio) {
        beforePropertyWrite("foglio", this.foglio, foglio);
        this.foglio = foglio;
    }

    public String getFoglio() {
        beforePropertyRead("foglio");
        return this.foglio;
    }

    public void setParticella(String particella) {
        beforePropertyWrite("particella", this.particella, particella);
        this.particella = particella;
    }

    public String getParticella() {
        beforePropertyRead("particella");
        return this.particella;
    }

    public void setRedditoagrario(double redditoagrario) {
        beforePropertyWrite("redditoagrario", this.redditoagrario, redditoagrario);
        this.redditoagrario = redditoagrario;
    }

    public double getRedditoagrario() {
        beforePropertyRead("redditoagrario");
        if(this.redditoagrario == null) {
            return 0;
        }
        return this.redditoagrario;
    }

    public void setRedditodomenicale(double redditodomenicale) {
        beforePropertyWrite("redditodomenicale", this.redditodomenicale, redditodomenicale);
        this.redditodomenicale = redditodomenicale;
    }

    public double getRedditodomenicale() {
        beforePropertyRead("redditodomenicale");
        if(this.redditodomenicale == null) {
            return 0;
        }
        return this.redditodomenicale;
    }

    public void setRendita(double rendita) {
        beforePropertyWrite("rendita", this.rendita, rendita);
        this.rendita = rendita;
    }

    public double getRendita() {
        beforePropertyRead("rendita");
        if(this.rendita == null) {
            return 0;
        }
        return this.rendita;
    }

    public void setSubalterno(String subalterno) {
        beforePropertyWrite("subalterno", this.subalterno, subalterno);
        this.subalterno = subalterno;
    }

    public String getSubalterno() {
        beforePropertyRead("subalterno");
        return this.subalterno;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setImmobili(Immobili immobili) {
        setToOneTarget("immobili", immobili, true);
    }

    public Immobili getImmobili() {
        return (Immobili)readProperty("immobili");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "categoria":
                return this.categoria;
            case "dateupdate":
                return this.dateupdate;
            case "dimensione":
                return this.dimensione;
            case "foglio":
                return this.foglio;
            case "particella":
                return this.particella;
            case "redditoagrario":
                return this.redditoagrario;
            case "redditodomenicale":
                return this.redditodomenicale;
            case "rendita":
                return this.rendita;
            case "subalterno":
                return this.subalterno;
            case "agenti":
                return this.agenti;
            case "immobili":
                return this.immobili;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "categoria":
                this.categoria = (String)val;
                break;
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "dimensione":
                this.dimensione = (Double)val;
                break;
            case "foglio":
                this.foglio = (String)val;
                break;
            case "particella":
                this.particella = (String)val;
                break;
            case "redditoagrario":
                this.redditoagrario = (Double)val;
                break;
            case "redditodomenicale":
                this.redditodomenicale = (Double)val;
                break;
            case "rendita":
                this.rendita = (Double)val;
                break;
            case "subalterno":
                this.subalterno = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "immobili":
                this.immobili = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.categoria);
        out.writeObject(this.dateupdate);
        out.writeObject(this.dimensione);
        out.writeObject(this.foglio);
        out.writeObject(this.particella);
        out.writeObject(this.redditoagrario);
        out.writeObject(this.redditodomenicale);
        out.writeObject(this.rendita);
        out.writeObject(this.subalterno);
        out.writeObject(this.agenti);
        out.writeObject(this.immobili);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.categoria = (String)in.readObject();
        this.dateupdate = (LocalDateTime)in.readObject();
        this.dimensione = (Double)in.readObject();
        this.foglio = (String)in.readObject();
        this.particella = (String)in.readObject();
        this.redditoagrario = (Double)in.readObject();
        this.redditodomenicale = (Double)in.readObject();
        this.rendita = (Double)in.readObject();
        this.subalterno = (String)in.readObject();
        this.agenti = in.readObject();
        this.immobili = in.readObject();
    }

}
