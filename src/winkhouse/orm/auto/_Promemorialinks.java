package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Promemoria;

/**
 * Class _Promemorialinks was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Promemorialinks extends BaseDataObject {

    private static final long serialVersionUID = 1L; 


    public static final Property<String> DESCRIZIONE = Property.create("descrizione", String.class);
    public static final Property<Boolean> ISFILE = Property.create("isfile", Boolean.class);
    public static final Property<String> URILINK = Property.create("urilink", String.class);
    public static final Property<Promemoria> PROMEMORIA = Property.create("promemoria", Promemoria.class);

    protected String descrizione;
    protected Boolean isfile;
    protected String urilink;

    protected Object promemoria;

    public void setDescrizione(String descrizione) {
        beforePropertyWrite("descrizione", this.descrizione, descrizione);
        this.descrizione = descrizione;
    }

    public String getDescrizione() {
        beforePropertyRead("descrizione");
        return this.descrizione;
    }

    public void setIsfile(boolean isfile) {
        beforePropertyWrite("isfile", this.isfile, isfile);
        this.isfile = isfile;
    }

	public boolean isIsfile() {
        beforePropertyRead("isfile");
        if(this.isfile == null) {
            return false;
        }
        return this.isfile;
    }

    public void setUrilink(String urilink) {
        beforePropertyWrite("urilink", this.urilink, urilink);
        this.urilink = urilink;
    }

    public String getUrilink() {
        beforePropertyRead("urilink");
        return this.urilink;
    }

    public void setPromemoria(Promemoria promemoria) {
        setToOneTarget("promemoria", promemoria, true);
    }

    public Promemoria getPromemoria() {
        return (Promemoria)readProperty("promemoria");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "descrizione":
                return this.descrizione;
            case "isfile":
                return this.isfile;
            case "urilink":
                return this.urilink;
            case "promemoria":
                return this.promemoria;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "descrizione":
                this.descrizione = (String)val;
                break;
            case "isfile":
                this.isfile = (Boolean)val;
                break;
            case "urilink":
                this.urilink = (String)val;
                break;
            case "promemoria":
                this.promemoria = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.descrizione);
        out.writeObject(this.isfile);
        out.writeObject(this.urilink);
        out.writeObject(this.promemoria);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.descrizione = (String)in.readObject();
        this.isfile = (Boolean)in.readObject();
        this.urilink = (String)in.readObject();
        this.promemoria = in.readObject();
    }

}
