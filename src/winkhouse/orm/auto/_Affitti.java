package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Affittiallegati;
import winkhouse.orm.Affittianagrafiche;
import winkhouse.orm.Affittirate;
import winkhouse.orm.Affittispese;
import winkhouse.orm.Agenti;
import winkhouse.orm.Immobili;

/**
 * Class _Affitti was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Affitti extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODAFFITTI_PK_COLUMN = "CODAFFITTI";

    public static final Property<Double> CAUZIONE = Property.create("cauzione", Double.class);
    public static final Property<LocalDateTime> DATAFINE = Property.create("datafine", LocalDateTime.class);
    public static final Property<LocalDateTime> DATAINIZIO = Property.create("datainizio", LocalDateTime.class);
    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> DESCRIZIONE = Property.create("descrizione", String.class);
    public static final Property<Double> RATA = Property.create("rata", Double.class);
    public static final Property<List<Affittiallegati>> AFFITTIALLEGATIS = Property.create("affittiallegatis", List.class);
    public static final Property<List<Affittianagrafiche>> AFFITTIANAGRAFICHES = Property.create("affittianagrafiches", List.class);
    public static final Property<List<Affittirate>> AFFITTIRATES = Property.create("affittirates", List.class);
    public static final Property<List<Affittispese>> AFFITTISPESES = Property.create("affittispeses", List.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Agenti> AGENTI1 = Property.create("agenti1", Agenti.class);
    public static final Property<Immobili> IMMOBILI = Property.create("immobili", Immobili.class);

    protected Double cauzione;
    protected LocalDateTime datafine;
    protected LocalDateTime datainizio;
    protected LocalDateTime dateupdate;
    protected String descrizione;
    protected Double rata;

    protected Object affittiallegatis;
    protected Object affittianagrafiches;
    protected Object affittirates;
    protected Object affittispeses;
    protected Object agenti;
    protected Object agenti1;
    protected Object immobili;

    public void setCauzione(double cauzione) {
        beforePropertyWrite("cauzione", this.cauzione, cauzione);
        this.cauzione = cauzione;
    }

    public double getCauzione() {
        beforePropertyRead("cauzione");
        if(this.cauzione == null) {
            return 0;
        }
        return this.cauzione;
    }

    public void setDatafine(LocalDateTime datafine) {
        beforePropertyWrite("datafine", this.datafine, datafine);
        this.datafine = datafine;
    }

    public LocalDateTime getDatafine() {
        beforePropertyRead("datafine");
        return this.datafine;
    }

    public void setDatainizio(LocalDateTime datainizio) {
        beforePropertyWrite("datainizio", this.datainizio, datainizio);
        this.datainizio = datainizio;
    }

    public LocalDateTime getDatainizio() {
        beforePropertyRead("datainizio");
        return this.datainizio;
    }

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setDescrizione(String descrizione) {
        beforePropertyWrite("descrizione", this.descrizione, descrizione);
        this.descrizione = descrizione;
    }

    public String getDescrizione() {
        beforePropertyRead("descrizione");
        return this.descrizione;
    }

    public void setRata(double rata) {
        beforePropertyWrite("rata", this.rata, rata);
        this.rata = rata;
    }

    public double getRata() {
        beforePropertyRead("rata");
        if(this.rata == null) {
            return 0;
        }
        return this.rata;
    }

    public void addToAffittiallegatis(Affittiallegati obj) {
        addToManyTarget("affittiallegatis", obj, true);
    }

    public void removeFromAffittiallegatis(Affittiallegati obj) {
        removeToManyTarget("affittiallegatis", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Affittiallegati> getAffittiallegatis() {
        return (List<Affittiallegati>)readProperty("affittiallegatis");
    }

    public void addToAffittianagrafiches(Affittianagrafiche obj) {
        addToManyTarget("affittianagrafiches", obj, true);
    }

    public void removeFromAffittianagrafiches(Affittianagrafiche obj) {
        removeToManyTarget("affittianagrafiches", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Affittianagrafiche> getAffittianagrafiches() {
        return (List<Affittianagrafiche>)readProperty("affittianagrafiches");
    }

    public void addToAffittirates(Affittirate obj) {
        addToManyTarget("affittirates", obj, true);
    }

    public void removeFromAffittirates(Affittirate obj) {
        removeToManyTarget("affittirates", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Affittirate> getAffittirates() {
        return (List<Affittirate>)readProperty("affittirates");
    }

    public void addToAffittispeses(Affittispese obj) {
        addToManyTarget("affittispeses", obj, true);
    }

    public void removeFromAffittispeses(Affittispese obj) {
        removeToManyTarget("affittispeses", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Affittispese> getAffittispeses() {
        return (List<Affittispese>)readProperty("affittispeses");
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setAgenti1(Agenti agenti1) {
        setToOneTarget("agenti1", agenti1, true);
    }

    public Agenti getAgenti1() {
        return (Agenti)readProperty("agenti1");
    }

    public void setImmobili(Immobili immobili) {
        setToOneTarget("immobili", immobili, true);
    }

    public Immobili getImmobili() {
        return (Immobili)readProperty("immobili");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "cauzione":
                return this.cauzione;
            case "datafine":
                return this.datafine;
            case "datainizio":
                return this.datainizio;
            case "dateupdate":
                return this.dateupdate;
            case "descrizione":
                return this.descrizione;
            case "rata":
                return this.rata;
            case "affittiallegatis":
                return this.affittiallegatis;
            case "affittianagrafiches":
                return this.affittianagrafiches;
            case "affittirates":
                return this.affittirates;
            case "affittispeses":
                return this.affittispeses;
            case "agenti":
                return this.agenti;
            case "agenti1":
                return this.agenti1;
            case "immobili":
                return this.immobili;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "cauzione":
                this.cauzione = (Double)val;
                break;
            case "datafine":
                this.datafine = (LocalDateTime)val;
                break;
            case "datainizio":
                this.datainizio = (LocalDateTime)val;
                break;
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "descrizione":
                this.descrizione = (String)val;
                break;
            case "rata":
                this.rata = (Double)val;
                break;
            case "affittiallegatis":
                this.affittiallegatis = val;
                break;
            case "affittianagrafiches":
                this.affittianagrafiches = val;
                break;
            case "affittirates":
                this.affittirates = val;
                break;
            case "affittispeses":
                this.affittispeses = val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "agenti1":
                this.agenti1 = val;
                break;
            case "immobili":
                this.immobili = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.cauzione);
        out.writeObject(this.datafine);
        out.writeObject(this.datainizio);
        out.writeObject(this.dateupdate);
        out.writeObject(this.descrizione);
        out.writeObject(this.rata);
        out.writeObject(this.affittiallegatis);
        out.writeObject(this.affittianagrafiches);
        out.writeObject(this.affittirates);
        out.writeObject(this.affittispeses);
        out.writeObject(this.agenti);
        out.writeObject(this.agenti1);
        out.writeObject(this.immobili);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.cauzione = (Double)in.readObject();
        this.datafine = (LocalDateTime)in.readObject();
        this.datainizio = (LocalDateTime)in.readObject();
        this.dateupdate = (LocalDateTime)in.readObject();
        this.descrizione = (String)in.readObject();
        this.rata = (Double)in.readObject();
        this.affittiallegatis = in.readObject();
        this.affittianagrafiches = in.readObject();
        this.affittirates = in.readObject();
        this.affittispeses = in.readObject();
        this.agenti = in.readObject();
        this.agenti1 = in.readObject();
        this.immobili = in.readObject();
    }

}
