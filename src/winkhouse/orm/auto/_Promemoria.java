package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Promemorialinks;

/**
 * Class _Promemoria was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Promemoria extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODPROMEMORIA_PK_COLUMN = "CODPROMEMORIA";

    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> DESCRIZIONE = Property.create("descrizione", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Agenti> AGENTI1 = Property.create("agenti1", Agenti.class);
    public static final Property<List<Promemorialinks>> PROMEMORIALINKSS = Property.create("promemorialinkss", List.class);

    protected LocalDateTime dateupdate;
    protected String descrizione;

    protected Object agenti;
    protected Object agenti1;
    protected Object promemorialinkss;

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setDescrizione(String descrizione) {
        beforePropertyWrite("descrizione", this.descrizione, descrizione);
        this.descrizione = descrizione;
    }

    public String getDescrizione() {
        beforePropertyRead("descrizione");
        return this.descrizione;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setAgenti1(Agenti agenti1) {
        setToOneTarget("agenti1", agenti1, true);
    }

    public Agenti getAgenti1() {
        return (Agenti)readProperty("agenti1");
    }

    public void addToPromemorialinkss(Promemorialinks obj) {
        addToManyTarget("promemorialinkss", obj, true);
    }

    public void removeFromPromemorialinkss(Promemorialinks obj) {
        removeToManyTarget("promemorialinkss", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Promemorialinks> getPromemorialinkss() {
        return (List<Promemorialinks>)readProperty("promemorialinkss");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateupdate":
                return this.dateupdate;
            case "descrizione":
                return this.descrizione;
            case "agenti":
                return this.agenti;
            case "agenti1":
                return this.agenti1;
            case "promemorialinkss":
                return this.promemorialinkss;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "descrizione":
                this.descrizione = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "agenti1":
                this.agenti1 = val;
                break;
            case "promemorialinkss":
                this.promemorialinkss = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateupdate);
        out.writeObject(this.descrizione);
        out.writeObject(this.agenti);
        out.writeObject(this.agenti1);
        out.writeObject(this.promemorialinkss);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateupdate = (LocalDateTime)in.readObject();
        this.descrizione = (String)in.readObject();
        this.agenti = in.readObject();
        this.agenti1 = in.readObject();
        this.promemorialinkss = in.readObject();
    }

}
