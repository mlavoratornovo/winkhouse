package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Appuntamenti;
import winkhouse.orm.Colloqui;

/**
 * Class _Winkgcalendar was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Winkgcalendar extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODWINKGCALENDAR_PK_COLUMN = "CODWINKGCALENDAR";

    public static final Property<String> CALENDARID = Property.create("calendarid", String.class);
    public static final Property<String> EVENTID = Property.create("eventid", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Appuntamenti> APPUNTAMENTI = Property.create("appuntamenti", Appuntamenti.class);
    public static final Property<Colloqui> COLLOQUI = Property.create("colloqui", Colloqui.class);

    protected String calendarid;
    protected String eventid;

    protected Object agenti;
    protected Object appuntamenti;
    protected Object colloqui;

    public void setCalendarid(String calendarid) {
        beforePropertyWrite("calendarid", this.calendarid, calendarid);
        this.calendarid = calendarid;
    }

    public String getCalendarid() {
        beforePropertyRead("calendarid");
        return this.calendarid;
    }

    public void setEventid(String eventid) {
        beforePropertyWrite("eventid", this.eventid, eventid);
        this.eventid = eventid;
    }

    public String getEventid() {
        beforePropertyRead("eventid");
        return this.eventid;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setAppuntamenti(Appuntamenti appuntamenti) {
        setToOneTarget("appuntamenti", appuntamenti, true);
    }

    public Appuntamenti getAppuntamenti() {
        return (Appuntamenti)readProperty("appuntamenti");
    }

    public void setColloqui(Colloqui colloqui) {
        setToOneTarget("colloqui", colloqui, true);
    }

    public Colloqui getColloqui() {
        return (Colloqui)readProperty("colloqui");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "calendarid":
                return this.calendarid;
            case "eventid":
                return this.eventid;
            case "agenti":
                return this.agenti;
            case "appuntamenti":
                return this.appuntamenti;
            case "colloqui":
                return this.colloqui;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "calendarid":
                this.calendarid = (String)val;
                break;
            case "eventid":
                this.eventid = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "appuntamenti":
                this.appuntamenti = val;
                break;
            case "colloqui":
                this.colloqui = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.calendarid);
        out.writeObject(this.eventid);
        out.writeObject(this.agenti);
        out.writeObject(this.appuntamenti);
        out.writeObject(this.colloqui);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.calendarid = (String)in.readObject();
        this.eventid = (String)in.readObject();
        this.agenti = in.readObject();
        this.appuntamenti = in.readObject();
        this.colloqui = in.readObject();
    }

}
