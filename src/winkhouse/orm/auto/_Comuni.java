package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _Comuni was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Comuni extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODCOMUNE_PK_COLUMN = "CODCOMUNE";

    public static final Property<Integer> ABITANTI = Property.create("abitanti", Integer.class);
    public static final Property<String> CAP = Property.create("cap", String.class);
    public static final Property<String> CODFISCO = Property.create("codfisco", String.class);
    public static final Property<String> CODISTAT = Property.create("codistat", String.class);
    public static final Property<String> COMUNE = Property.create("comune", String.class);
    public static final Property<String> LINK = Property.create("link", String.class);
    public static final Property<String> PREFISSO = Property.create("prefisso", String.class);
    public static final Property<String> PROVINCIA = Property.create("provincia", String.class);
    public static final Property<String> REGIONE = Property.create("regione", String.class);

    protected Integer abitanti;
    protected String cap;
    protected String codfisco;
    protected String codistat;
    protected String comune;
    protected String link;
    protected String prefisso;
    protected String provincia;
    protected String regione;


    public void setAbitanti(int abitanti) {
        beforePropertyWrite("abitanti", this.abitanti, abitanti);
        this.abitanti = abitanti;
    }

    public int getAbitanti() {
        beforePropertyRead("abitanti");
        if(this.abitanti == null) {
            return 0;
        }
        return this.abitanti;
    }

    public void setCap(String cap) {
        beforePropertyWrite("cap", this.cap, cap);
        this.cap = cap;
    }

    public String getCap() {
        beforePropertyRead("cap");
        return this.cap;
    }

    public void setCodfisco(String codfisco) {
        beforePropertyWrite("codfisco", this.codfisco, codfisco);
        this.codfisco = codfisco;
    }

    public String getCodfisco() {
        beforePropertyRead("codfisco");
        return this.codfisco;
    }

    public void setCodistat(String codistat) {
        beforePropertyWrite("codistat", this.codistat, codistat);
        this.codistat = codistat;
    }

    public String getCodistat() {
        beforePropertyRead("codistat");
        return this.codistat;
    }

    public void setComune(String comune) {
        beforePropertyWrite("comune", this.comune, comune);
        this.comune = comune;
    }

    public String getComune() {
        beforePropertyRead("comune");
        return this.comune;
    }

    public void setLink(String link) {
        beforePropertyWrite("link", this.link, link);
        this.link = link;
    }

    public String getLink() {
        beforePropertyRead("link");
        return this.link;
    }

    public void setPrefisso(String prefisso) {
        beforePropertyWrite("prefisso", this.prefisso, prefisso);
        this.prefisso = prefisso;
    }

    public String getPrefisso() {
        beforePropertyRead("prefisso");
        return this.prefisso;
    }

    public void setProvincia(String provincia) {
        beforePropertyWrite("provincia", this.provincia, provincia);
        this.provincia = provincia;
    }

    public String getProvincia() {
        beforePropertyRead("provincia");
        return this.provincia;
    }

    public void setRegione(String regione) {
        beforePropertyWrite("regione", this.regione, regione);
        this.regione = regione;
    }

    public String getRegione() {
        beforePropertyRead("regione");
        return this.regione;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "abitanti":
                return this.abitanti;
            case "cap":
                return this.cap;
            case "codfisco":
                return this.codfisco;
            case "codistat":
                return this.codistat;
            case "comune":
                return this.comune;
            case "link":
                return this.link;
            case "prefisso":
                return this.prefisso;
            case "provincia":
                return this.provincia;
            case "regione":
                return this.regione;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "abitanti":
                this.abitanti = (Integer)val;
                break;
            case "cap":
                this.cap = (String)val;
                break;
            case "codfisco":
                this.codfisco = (String)val;
                break;
            case "codistat":
                this.codistat = (String)val;
                break;
            case "comune":
                this.comune = (String)val;
                break;
            case "link":
                this.link = (String)val;
                break;
            case "prefisso":
                this.prefisso = (String)val;
                break;
            case "provincia":
                this.provincia = (String)val;
                break;
            case "regione":
                this.regione = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.abitanti);
        out.writeObject(this.cap);
        out.writeObject(this.codfisco);
        out.writeObject(this.codistat);
        out.writeObject(this.comune);
        out.writeObject(this.link);
        out.writeObject(this.prefisso);
        out.writeObject(this.provincia);
        out.writeObject(this.regione);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.abitanti = (Integer)in.readObject();
        this.cap = (String)in.readObject();
        this.codfisco = (String)in.readObject();
        this.codistat = (String)in.readObject();
        this.comune = (String)in.readObject();
        this.link = (String)in.readObject();
        this.prefisso = (String)in.readObject();
        this.provincia = (String)in.readObject();
        this.regione = (String)in.readObject();
    }

}
