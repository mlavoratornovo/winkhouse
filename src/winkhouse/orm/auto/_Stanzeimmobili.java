package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Immobili;
import winkhouse.orm.Tipologiastanze;

/**
 * Class _Stanzeimmobili was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Stanzeimmobili extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODSTANZEIMMOBILI_PK_COLUMN = "CODSTANZEIMMOBILI";

    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<Integer> MQ = Property.create("mq", Integer.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Immobili> IMMOBILI = Property.create("immobili", Immobili.class);
    public static final Property<Tipologiastanze> TIPOLOGIASTANZE = Property.create("tipologiastanze", Tipologiastanze.class);

    protected LocalDateTime dateupdate;
    protected Integer mq;

    protected Object agenti;
    protected Object immobili;
    protected Object tipologiastanze;

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setMq(int mq) {
        beforePropertyWrite("mq", this.mq, mq);
        this.mq = mq;
    }

    public int getMq() {
        beforePropertyRead("mq");
        if(this.mq == null) {
            return 0;
        }
        return this.mq;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setImmobili(Immobili immobili) {
        setToOneTarget("immobili", immobili, true);
    }

    public Immobili getImmobili() {
        return (Immobili)readProperty("immobili");
    }

    public void setTipologiastanze(Tipologiastanze tipologiastanze) {
        setToOneTarget("tipologiastanze", tipologiastanze, true);
    }

    public Tipologiastanze getTipologiastanze() {
        return (Tipologiastanze)readProperty("tipologiastanze");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateupdate":
                return this.dateupdate;
            case "mq":
                return this.mq;
            case "agenti":
                return this.agenti;
            case "immobili":
                return this.immobili;
            case "tipologiastanze":
                return this.tipologiastanze;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "mq":
                this.mq = (Integer)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "immobili":
                this.immobili = val;
                break;
            case "tipologiastanze":
                this.tipologiastanze = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateupdate);
        out.writeObject(this.mq);
        out.writeObject(this.agenti);
        out.writeObject(this.immobili);
        out.writeObject(this.tipologiastanze);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateupdate = (LocalDateTime)in.readObject();
        this.mq = (Integer)in.readObject();
        this.agenti = in.readObject();
        this.immobili = in.readObject();
        this.tipologiastanze = in.readObject();
    }

}
