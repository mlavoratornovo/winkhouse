package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Colloqui;
import winkhouse.orm.Ricerche;

/**
 * Class _Colloquicriteriricerca was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Colloquicriteriricerca extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODCRITERIORICERCA_PK_COLUMN = "CODCRITERIORICERCA";

    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> FROMVALUE = Property.create("fromvalue", String.class);
    public static final Property<String> GETTERMETHODNAME = Property.create("gettermethodname", String.class);
    public static final Property<Boolean> ISPERSONAL = Property.create("ispersonal", Boolean.class);
    public static final Property<String> LOGICALOPERATOR = Property.create("logicaloperator", String.class);
    public static final Property<String> TOVALUE = Property.create("tovalue", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Colloqui> COLLOQUI = Property.create("colloqui", Colloqui.class);
    public static final Property<Ricerche> RICERCHE = Property.create("ricerche", Ricerche.class);

    protected LocalDateTime dateupdate;
    protected String fromvalue;
    protected String gettermethodname;
    protected Boolean ispersonal;
    protected String logicaloperator;
    protected String tovalue;

    protected Object agenti;
    protected Object colloqui;
    protected Object ricerche;

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setFromvalue(String fromvalue) {
        beforePropertyWrite("fromvalue", this.fromvalue, fromvalue);
        this.fromvalue = fromvalue;
    }

    public String getFromvalue() {
        beforePropertyRead("fromvalue");
        return this.fromvalue;
    }

    public void setGettermethodname(String gettermethodname) {
        beforePropertyWrite("gettermethodname", this.gettermethodname, gettermethodname);
        this.gettermethodname = gettermethodname;
    }

    public String getGettermethodname() {
        beforePropertyRead("gettermethodname");
        return this.gettermethodname;
    }

    public void setIspersonal(boolean ispersonal) {
        beforePropertyWrite("ispersonal", this.ispersonal, ispersonal);
        this.ispersonal = ispersonal;
    }

	public boolean isIspersonal() {
        beforePropertyRead("ispersonal");
        if(this.ispersonal == null) {
            return false;
        }
        return this.ispersonal;
    }

    public void setLogicaloperator(String logicaloperator) {
        beforePropertyWrite("logicaloperator", this.logicaloperator, logicaloperator);
        this.logicaloperator = logicaloperator;
    }

    public String getLogicaloperator() {
        beforePropertyRead("logicaloperator");
        return this.logicaloperator;
    }

    public void setTovalue(String tovalue) {
        beforePropertyWrite("tovalue", this.tovalue, tovalue);
        this.tovalue = tovalue;
    }

    public String getTovalue() {
        beforePropertyRead("tovalue");
        return this.tovalue;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setColloqui(Colloqui colloqui) {
        setToOneTarget("colloqui", colloqui, true);
    }

    public Colloqui getColloqui() {
        return (Colloqui)readProperty("colloqui");
    }

    public void setRicerche(Ricerche ricerche) {
        setToOneTarget("ricerche", ricerche, true);
    }

    public Ricerche getRicerche() {
        return (Ricerche)readProperty("ricerche");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateupdate":
                return this.dateupdate;
            case "fromvalue":
                return this.fromvalue;
            case "gettermethodname":
                return this.gettermethodname;
            case "ispersonal":
                return this.ispersonal;
            case "logicaloperator":
                return this.logicaloperator;
            case "tovalue":
                return this.tovalue;
            case "agenti":
                return this.agenti;
            case "colloqui":
                return this.colloqui;
            case "ricerche":
                return this.ricerche;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "fromvalue":
                this.fromvalue = (String)val;
                break;
            case "gettermethodname":
                this.gettermethodname = (String)val;
                break;
            case "ispersonal":
                this.ispersonal = (Boolean)val;
                break;
            case "logicaloperator":
                this.logicaloperator = (String)val;
                break;
            case "tovalue":
                this.tovalue = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "colloqui":
                this.colloqui = val;
                break;
            case "ricerche":
                this.ricerche = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateupdate);
        out.writeObject(this.fromvalue);
        out.writeObject(this.gettermethodname);
        out.writeObject(this.ispersonal);
        out.writeObject(this.logicaloperator);
        out.writeObject(this.tovalue);
        out.writeObject(this.agenti);
        out.writeObject(this.colloqui);
        out.writeObject(this.ricerche);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateupdate = (LocalDateTime)in.readObject();
        this.fromvalue = (String)in.readObject();
        this.gettermethodname = (String)in.readObject();
        this.ispersonal = (Boolean)in.readObject();
        this.logicaloperator = (String)in.readObject();
        this.tovalue = (String)in.readObject();
        this.agenti = in.readObject();
        this.colloqui = in.readObject();
        this.ricerche = in.readObject();
    }

}
