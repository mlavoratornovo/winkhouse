package winkhouse.orm.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

import winkhouse.orm.Agenti;
import winkhouse.orm.Report;

/**
 * Class _Reportmarkers was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Reportmarkers extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String CODMARKER_PK_COLUMN = "CODMARKER";

    public static final Property<LocalDateTime> DATEUPDATE = Property.create("dateupdate", LocalDateTime.class);
    public static final Property<String> GETMETHODNAME = Property.create("getmethodname", String.class);
    public static final Property<String> NOME = Property.create("nome", String.class);
    public static final Property<String> PARAMS = Property.create("params", String.class);
    public static final Property<String> PARAMSDESC = Property.create("paramsdesc", String.class);
    public static final Property<String> TIPO = Property.create("tipo", String.class);
    public static final Property<Agenti> AGENTI = Property.create("agenti", Agenti.class);
    public static final Property<Report> REPORT = Property.create("report", Report.class);

    protected LocalDateTime dateupdate;
    protected String getmethodname;
    protected String nome;
    protected String params;
    protected String paramsdesc;
    protected String tipo;

    protected Object agenti;
    protected Object report;

    public void setDateupdate(LocalDateTime dateupdate) {
        beforePropertyWrite("dateupdate", this.dateupdate, dateupdate);
        this.dateupdate = dateupdate;
    }

    public LocalDateTime getDateupdate() {
        beforePropertyRead("dateupdate");
        return this.dateupdate;
    }

    public void setGetmethodname(String getmethodname) {
        beforePropertyWrite("getmethodname", this.getmethodname, getmethodname);
        this.getmethodname = getmethodname;
    }

    public String getGetmethodname() {
        beforePropertyRead("getmethodname");
        return this.getmethodname;
    }

    public void setNome(String nome) {
        beforePropertyWrite("nome", this.nome, nome);
        this.nome = nome;
    }

    public String getNome() {
        beforePropertyRead("nome");
        return this.nome;
    }

    public void setParams(String params) {
        beforePropertyWrite("params", this.params, params);
        this.params = params;
    }

    public String getParams() {
        beforePropertyRead("params");
        return this.params;
    }

    public void setParamsdesc(String paramsdesc) {
        beforePropertyWrite("paramsdesc", this.paramsdesc, paramsdesc);
        this.paramsdesc = paramsdesc;
    }

    public String getParamsdesc() {
        beforePropertyRead("paramsdesc");
        return this.paramsdesc;
    }

    public void setTipo(String tipo) {
        beforePropertyWrite("tipo", this.tipo, tipo);
        this.tipo = tipo;
    }

    public String getTipo() {
        beforePropertyRead("tipo");
        return this.tipo;
    }

    public void setAgenti(Agenti agenti) {
        setToOneTarget("agenti", agenti, true);
    }

    public Agenti getAgenti() {
        return (Agenti)readProperty("agenti");
    }

    public void setReport(Report report) {
        setToOneTarget("report", report, true);
    }

    public Report getReport() {
        return (Report)readProperty("report");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateupdate":
                return this.dateupdate;
            case "getmethodname":
                return this.getmethodname;
            case "nome":
                return this.nome;
            case "params":
                return this.params;
            case "paramsdesc":
                return this.paramsdesc;
            case "tipo":
                return this.tipo;
            case "agenti":
                return this.agenti;
            case "report":
                return this.report;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateupdate":
                this.dateupdate = (LocalDateTime)val;
                break;
            case "getmethodname":
                this.getmethodname = (String)val;
                break;
            case "nome":
                this.nome = (String)val;
                break;
            case "params":
                this.params = (String)val;
                break;
            case "paramsdesc":
                this.paramsdesc = (String)val;
                break;
            case "tipo":
                this.tipo = (String)val;
                break;
            case "agenti":
                this.agenti = val;
                break;
            case "report":
                this.report = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateupdate);
        out.writeObject(this.getmethodname);
        out.writeObject(this.nome);
        out.writeObject(this.params);
        out.writeObject(this.paramsdesc);
        out.writeObject(this.tipo);
        out.writeObject(this.agenti);
        out.writeObject(this.report);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateupdate = (LocalDateTime)in.readObject();
        this.getmethodname = (String)in.readObject();
        this.nome = (String)in.readObject();
        this.params = (String)in.readObject();
        this.paramsdesc = (String)in.readObject();
        this.tipo = (String)in.readObject();
        this.agenti = in.readObject();
        this.report = in.readObject();
    }

}
